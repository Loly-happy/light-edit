#
#
# a = 15**42
# print(a)
# print(120 // 12 == 120 / 12)
# print(True == 1)
#
# a = 10
# if a >= 10:
#         b = 1
# else:
#         b = 0
# print(b)
#
# a = 36
# b = a % 2
# if b == 0:
#    print('—á–µ—Ç–Ω–æ–µ')
# else:
#    print('–Ω–µ—á–µ—Ç–Ω–æ–µ')
#
# my_variable = 11
# print(my_variable % 2 == 0)

#
# print(bin(-30 ** 1))
# print(oct(-30 ** 1))
import math
#
# seconds_since_birthdate = 757679845
# # if seconds_since_birthdate/365*24*60*60 < 200:
# if seconds_since_birthdate/(365*24*60*60) < 200:
#     print(math.floor(seconds_since_birthdate/(365*24*60*60)))
#
#
# a = "string"
# b = 'string'
# c = """string"""
# d = '''string'''
# print(a == b == c == d)
# print(a is b is c is d)
# text = "–ü—Ä–∏–≤–µ—Ç –û–ª—è"
#
# print(text[7:])
# t = "abcdefghijk 1456 ahalai-mahalai! –í–æ—Å—Å—Ç–∞–Ω—å, —Å—ã–Ω —Ç—Ä—ë—Ö–≥–æ–ª–æ–≤–æ–≥–æ –¥—Ä–∞–∫–æ–Ω–∞!"
# if len(t) >= 42:
#     print(t[1:-1:2])
# else:
#     print(len(t))
#
# text = "mistake message: –ê–π, —Å–ª—É—á–∏–ª–∞—Å—è –±–µ–¥–∞!"
#
# template = 'message: '
# i = text.index(template)
# print(text[i + len(template):])  #–Ω–∞—á–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å —ç–ª–µ–º–µ–Ω–∞ + –¥–∏–Ω–∞ —ç–ª–µ–º–µ–Ω—Ç–∞, —á—Ç–æ–±—ã –≤—ã—á–∏—Å–ª–∏—Ç—å —Å –∫–∞–∫–≥–æ –º–µ—Å—Ç–∞ –±—É–¥–µ—Ç —Å—Ä–µ–∑
# print(i + len(template))
# print(i)
# text = "12435514234 ERROR index: big_terrible_mistake message: –ê–π, —Å–ª—É—á–∏–ª–∞—Å—è –±–µ–¥–∞!"
#
# template = 'e: '
# index = text.index(template)
# print(text[index + len(template):])

# text = "5423534 lajksdfij;jhh message: –∞–±—Ä–∞–∫–∞–¥–∞–±—Ä–∞ dfasdfs9d6f7686"
#
# template = 'message: '
# index = text.find(template)
# if index != -1:
#     print(text[index + len(template):])

# string = 'geeks for geeks'
#
# # returns index value
# result = string.find('for')
# print("Substring for:", result)
#
# result3 = string.find("best")
# print("substring best:", result3)
#
# text = "12435514234 ERROR index: big_terrible_mistake message: –ê–π, —Å–ª—É—á–∏–ª–∞—Å—è –±–µ–¥–∞!"
#
# template = 'message: '
# if template in text:
#     index = text.index(template)
#     print(text[index + len(template):])
#
# word = "—Å—Ç–æ—è—Ç—å"
#
# if word.endswith("—å"):
#     print("–≠—Ç–æ —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ –∂–µ–Ω—Å–∫–æ–≥–æ —Ä–æ–¥–∞:", word)
#
# s = "Python is a great programming language"
# print(len(s))
# print(s.endswith("language"))  # True
# print(s.endswith("Python"))  # False
# print(s.endswith(("Python", "language")))  # True (checking multiple suffixes)
#
#
t= 'b645m7km76tn3w4(*&(%^%*T(üÇ¶ üÇß üÇ® üÇ© üÇ™ üÇ´*uiovjty_8_'
# t= ""
# print(t.isascii())
# rt = t.isascii()
# print(len(t))
# if len(t) == 0:
#     print("false")
#     # print(rt)
#
# else:
#     print(t.endswith('8_'))
#
# a = ["ddfgh", "—Ç–∏–ø–∞", "–ø–∞—ã–≤—Ç–∏–ø–∞–∫–∞—Ñ—Ü—É–º", "—Ç–∏–ø–∞", "–≤—ã—É–∞—Ç–µ–∫", "–Ω–µ–∫", "—Ç–∏–ø–∞"]
# print(a.count("—Ç–∏–ø–∞"))

#
# text = "–í –º–∏—Ä–µ –Ω–µ—Ç –Ω–∏ —á–µ–≥–æ –ø—Ä–∏—è—Ç–Ω–µ–µ —á–µ–º –ø–æ—Å–ø–∞—Ç—å –¥–æ –û–ë–ï–î–ê"
# prepared_text = text.casefold().replace(' ', '')
# print(prepared_text)
# print(prepared_text[::-1])
# print(prepared_text == prepared_text[::-1])
#
# a = '–¢—Ä–∏ —É—Ç—ë–Ω–∫–∞ –ø–æ —Ç—Ä–∏ —Ä–∞–∑–∞ —Ç—ë—Ä–ª–∏ –ª–∞–ø–∫–∏ –ø–æ—Ç—Ä—ë–ø–∞–Ω–Ω—ã–º–∏ –º–æ—á–∞–ª–∫–∞–º–∏ –∏ –∫—Ä—è–∫–∞–ª–∏ –¥—Ä—É–≥ –¥—Ä—É–≥—É: ‚Äû—Å–º–æ—Ç—Ä–∏, –º–æ–∏ –ª–∞–ø–∫–∏ —á–∏—â–µ —Ç–≤–æ–∏—Ö!‚Äú –°–º–æ—Ç—Ä–∏, —É—Ç—ë–Ω–æ–∫, –Ω–∞—Å–∫–≤–æ–∑—å –Ω–µ –ø—Ä–æ—Ç—Ä–∏!'
# print(a.casefold().count("—Ç—Ä"))
#
# string = "–¢—Ä–∏ —É—Ç—ë–Ω–∫–∞ –ø–æ —Ç—Ä–∏ —Ä–∞–∑–∞ —Ç—ë—Ä–ª–∏ –ª–∞–ø–∫–∏ –ø–æ—Ç—Ä—ë–ø–∞–Ω–Ω—ã–º–∏ –º–æ—á–∞–ª–∫–∞–º–∏ –∏ –∫—Ä—è–∫–∞–ª–∏ –¥—Ä—É–≥ –¥—Ä—É–≥—É: ‚Äû—Å–º–æ—Ç—Ä–∏, –º–æ–∏ –ª–∞–ø–∫–∏ —á–∏—â–µ —Ç–≤–æ–∏—Ö!‚Äú –°–º–æ—Ç—Ä–∏, —É—Ç—ë–Ω–æ–∫, –Ω–∞—Å–∫–≤–æ–∑—å –Ω–µ –ø—Ä–æ—Ç—Ä–∏!"
# substring = "–¢—Ä"
# print(string.count(substring))
#
# print('--+-- –ó–∞–ø–∏—Å—å –Ω–æ–º–µ—Ä 1 --+--'.removesuffix("--+--"))
#
#
# text = "–ü—Ä–∏–≤–µ—Ç World"
# result = text.removesuffix(".jpg")
# print(result)  # –ü–æ–ª—É—á–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ¬´–ü—Ä–∏–≤–µ—Ç, –ú–∏—Ä¬ª¬†[4](https://tr-page.yandex.ru/translate?lang=en-ru&url=https%3A%2F%2Fwww.tutorialspoint.com%2Fpython%2Fremovesuffix_method.htm)
#
# text = "Hello World"
# result = text.removesuffix(".jpg")
# print(result)  # –í—ã–≤–æ–¥: ¬´–ü—Ä–∏–≤–µ—Ç, –ú–∏—Ä¬ª¬†[4](https://tr-page.yandex.ru/translate?lang=en-ru&url=https%3A%2F%2Fwww.tutorialspoint.com%2Fpython%2Fremovesuffix_method.htm)

#
# string = "–î–∞ —á—Ç–æ–± —Ç–µ–±—è —Ç–∞—Ä–∞—â–∏–ª–æ!, –ì–¥–µ –º–æ–∏ –¥–µ–Ω—å–≥–∏???, –¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç 3(!)"
# x = string.split(',')
# print(x)
# # t = x.rstrip('!().?')
# # print(t)
# print(string.strip('!().?'))
# h = '(–ß—Ç–æ –±—ã —ç—Ç–æ –Ω–∏ –∑–Ω–∞—á–∏–ª–æ :)'
# print(", –±–ª–∏–Ω, ".join(h))
# splitted = "–í–∞—Å—è –Ω–µ—Ö–æ—Ä–æ—à–∏–π —á–µ–ª–æ–≤–µ–∫ –∑–∞–Ω—è–ª —Ç—Ä–∏ —Ä—É–±–ª—è –∏ –æ—Ç–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–∞–≤–∞—Ç—å!".split()
# print(", –±–ª–∏–Ω, ".join(splitted))
#     # '–í–∞—Å—è, –±–ª–∏–Ω, –Ω–µ—Ö–æ—Ä–æ—à–∏–π, –±–ª–∏–Ω, —á–µ–ª–æ–≤–µ–∫, –±–ª–∏–Ω, –∑–∞–Ω—è–ª, –±–ª–∏–Ω, —Ç—Ä–∏, –±–ª–∏–Ω, —Ä—É–±–ª—è, –±–ª–∏–Ω, –∏, –±–ª–∏–Ω, –æ—Ç–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è, –±–ª–∏–Ω, –æ—Ç–¥–∞–≤–∞—Ç—å!'
# name, author = "–ù–µ–∑–Ω–∞–π–∫–∞", "–ù–∏–∫–æ–ª–∞–π –ù–æ—Å–æ–≤"
# print("{:%<30} —Ö {:%>30}".format(name, author))

# name = "–ê–ª–∏—Å–∞"
# author = "–ò–≤–∞–Ω–æ–≤"
# sentence = "–ú–µ–Ω—è –∑–æ–≤—É—Ç {} –∏ —è –∂–∏–≤—É –≤ {}.".format(name, author)
# print(sentence)  # –í—ã–≤–æ–¥: –ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–ª–∏—Å–∞ –∏ —è –∂–∏–≤—É –≤ –ò–≤–∞–Ω–æ–≤¬†[1](https://pyhub.ru/python/lecture-5-12-26/)
#
#
# text = "–æ–¥–∏–Ω –¥–≤–∞ —Ç—Ä–∏ —á–µ—Ç—ã—Ä–µ –ø—è—Ç—å —à–µ—Å—Ç—å"
# print(text.split(' ',2))  # ['–æ–¥–∏–Ω', '–¥–≤–∞', '—Ç—Ä–∏ —á–µ—Ç—ã—Ä–µ']
# #
# car_cost = 120000
# manager, count = "–ü–µ—Ç—Ä–æ–≤", 12
# #
# print("–ü—Ä–æ–¥–∞–∂–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –≤ –ø—Ä–æ—à–ª–æ–º –º–µ—Å—è—Ü–µ:")
# print(f"–ú–µ–Ω–µ–¥–∂–µ—Ä {manager} –ø—Ä–æ–¥–∞–ª {count} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π, —á—Ç–æ –ø—Ä–∏–Ω–µ—Å–ª–æ {car_cost * count} –µ–¥–∏–Ω–∏—Ü –≤–∞–ª—é—Ç—ã.")
#
# r = 15
# r2 = r*r/10000
# h = 10
# p = 3.14
# print("–æ–±—ä–µ–º —Ü–∏–ª–∏–Ω–¥—Ä–∞ —Ä–∞–≤–µ–Ω:")
# print(f"—Ä–∞–¥–∏—É—Å –≤ –∫–≤–∞–¥—Ä–∞—Ç–µ {r/100*r/100}  * –≤—ã—Å–æ—Ç–∞ {h}  * –ø–∏ {p} –æ—Ç–≤–µ—Ç {r2*h*p:.2f}" )
          # {sqr(r/100)*h*p:.3f}.")
# import math
#
#
# radius = 15
# height = 10
# print("{:.2}".format(math.pi * height * (radius/100) ** 2))
# spade_cards = "üÇ° üÇ¢ üÇ£ üÇ§ üÇ• üÇ¶ üÇß üÇ® üÇ© üÇ™ üÇ´ üÇ¨ üÇ≠ üÇÆ"
#
# print(spade_cards)
# a = "star"
# b = a
# c = 'star'
# print(a == b == c)
#
# a = 20**50
# b = str(a)
# print(len(b))
#
# print("1"<"2")
#
# string = "–¢—Ä–∏ —É—Ç—ë–Ω–∫–∞ –ø–æ —Ç—Ä–∏ —Ä–∞–∑–∞ —Ç—ë—Ä–ª–∏ –ª–∞–ø–∫–∏ –ø–æ—Ç—Ä—ë–ø–∞–Ω–Ω—ã–º–∏ –º–æ—á–∞–ª–∫–∞–º–∏ –∏  –∫—Ä—è–∫–∞–ª–∏ –¥—Ä—É–≥ –¥—Ä—É–≥—É: ‚Äû—Å–º–æ—Ç—Ä–∏, –º–æ–∏ –ª–∞–ø–∫–∏ —á–∏—â–µ —Ç–≤–æ–∏—Ö!‚Äú –°–º–æ—Ç—Ä–∏, —É—Ç—ë–Ω–æ–∫, –Ω–∞—Å–∫–≤–æ–∑—å –Ω–µ –ø—Ä–æ—Ç—Ä–∏!".split()
# substring = " "
# print(string.count(substring))
# print(len(string))
# print(string)
#
# s = "–≠—Ç–æ –Ω–∞—à –ø—Ä–∏–º–µ—Ä —Å—Ç—Ä–æ–∫–∏"
# words = s.split()
# num_words = len(words)
# print(num_words)
#
# data = input()
# print(data * 5)
#
# import sys
#
# data = sys.stdin.readline()
# print(data * 5)

# import sys
#
# line = sys.stdin.readline()
# # –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∞—é—â–µ–≥–æ —Å–∏–º–≤–æ–ª–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
# line = line.strip(',.')
# print(f"Received: {line}")

# txt = ',.banana,.'
#
# x = txt.strip(',.')
#
# print('of all fruits', x, 'is my favorite') # => of all fruits, banana, is my favorite


# name = input("–í–≤–µ–¥–∏—Ç–µ IP-–∞–¥—Ä–µ—Å: ")
# d = name.split('.')
# print("_".join(d))
#
# import sys
#
# sys.stdout.write("–ü—Ä–∏–≤–µ—Ç, –∫–æ–∂–∞–Ω—ã–π –º–µ—à–æ–∫!\n")
#
# print("–≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –ø–ª–∞–≤–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç", end="")
#
# print(" –≤ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É.")
#
# # name1 = oct(input())
# name2 = input("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ:")
# name3 = input("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ: ")
# name4 = input("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ: ")
# a = input("–í–≤–µ–¥–∏—Ç–µ –≤–æ—Å—å–º–µ—Ä–∏—á–Ω–æ–µ —á–∏—Å–ª–æ>")
# print(int(name2, 0), int(name3, 0), int(name4, 0), int(a, 0), sep = ".")
# # print(int("name1"))
# binary_number = "1010"
# decimal_number = int(binary_number, 2)
# print(decimal_number)
#
# num1 = input("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤–æ–µ –≤–æ—Å—å–º–µ—Ä–∏—á–Ω–æ–µ —á–∏—Å–ª–æ: ")
# num2 = input("–í–≤–µ–¥–∏—Ç–µ –≤—Ç–æ—Ä–æ–µ –≤–æ—Å—å–º–µ—Ä–∏—á–Ω–æ–µ —á–∏—Å–ª–æ: ")
# num3 = input("–í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ—Ç—å–µ –≤–æ—Å—å–º–µ—Ä–∏—á–Ω–æ–µ —á–∏—Å–ª–æ: ")
# num4 = input("–í–≤–µ–¥–∏—Ç–µ —á–µ—Ç–≤—ë—Ä—Ç–æ–µ –≤–æ—Å—å–º–µ—Ä–∏—á–Ω–æ–µ —á–∏—Å–ª–æ: ")
# print(f"{int(num1, 8)}.{int(num2, 8)}.{int(num3, 8)}.{int(num4, 8)}")
#
#
# def recursive_func(n=0):
#    print('–í—ã–≤–æ–¥ –¥–æ –∑–∞–ø—É—Å–∫–∞ —Ä–µ–∫—É—Ä—Å–∏–∏: ', n)
#    if n < 3:
#        recursive_func(n + 1)
#    print('–í—ã–≤–æ–¥ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ —Ä–µ–∫—É—Ä—Å–∏–∏: ', n)
#
#
# recursive_func()
#
#
#
#
#
# def factorial(n):
#    # –ë–∞–∑–æ–≤—ã–π —Å–ª—É—á–∞–π
#    if n == 0:
#        return 1
#
#    # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π —Å–ª—É—á–∞–π
#    else:
#        return n * factorial(n-1)
#
# print(factorial(3))
# class Node:
#    def __init__(self, value, children=None):
#        self.value = value
#        self.children = children if children else []
# root = Node(5, [
#    Node(3, [
#        Node(1),
#        Node(4)
#    ]),
#    Node(2, [
#        Node(6),
#        Node(1)
#    ])
# ])
#
#
# # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —É–∑–ª–µ-–∫–æ—Ä–Ω–µ
# print(root.value)
# # 5
#
# # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –¥–æ—á–µ—Ä–Ω–∏—Ö —É–∑–ª–æ–≤
# print(root.children[0].value, root.children[1].value)
# # 3 2
#
# # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –ª–∏—Å—Ç—å–µ–≤
# print(root.children[0].children[0].value, root.children[0].children[1].value)
# print(root.children[1].children[0].value, root.children[1].children[1].value)
# # 1 4
# # 6 -1
#
#
# def test_tree_structure(node):
#     # —É node –µ—Å—Ç—å  value ‚Äî –∑–Ω–∞—á–µ–Ω–∏–µ
#     # –∏ children ‚Äî —Å–ø–∏—Å–æ–∫ –¥—Ä—É–≥–∏—Ö node
#
#     # –ë–∞–∑–æ–≤—ã–π —Å–ª—É—á–∞–π
#     if node.value < 0:
#         return False
#
#     # –†–µ–∫—É—Ä—Å–∏—è
#     for child in node.children:
#         if not test_tree_structure(child):
#             return False
#
#     return True
#
#
#
# # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞—à–µ –¥–µ—Ä–µ–≤–æ
# print(test_tree_structure(root))
# # False
#
#
# def fibonacci(n):
#    # –ë–∞–∑–æ–≤—ã–π —Å–ª—É—á–∞–π
#    if n <= 0:
#        return 0
#
#    if n == 1:
#        return 1
#
#    # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π —Å–ª—É—á–∞–π
#    else:
#        return fibonacci(n-1)+fibonacci(n-2)
#
# print(fibonacci(5))
# #5
# print(fibonacci(7))
# #13
# print(fibonacci(8))
# #21
#
# def is_palindrome(n):
#    # –ë–∞–∑–æ–≤—ã–π —Å–ª—É—á–∞–π
#    if n <= 0:
#        return 0
#
#    if n == 1:
#        return 1
#
#    # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π —Å–ª—É—á–∞–π
#    else:
#        return fibonacci(n-1)+fibonacci(n-2)
#
#
# def is_palindrome(s):
#     s_lower = s.lower()
#     if len(s_lower) < 2: return True
#     if s_lower[0] != s_lower[-1]: return False
#     return is_palindrome(s_lower[1:-1])







# def is_palindrome(s):
#     if len(s) <= 1:
#         return True
#     if s == s[-1]:
#         return False
#     return is_palindrome(s[::-1])

# print(is_palindrome('racecar'))
# # True
# print(is_palindrome('gong'))
# # False

#
#
#
# def binary_search(arr, x, low = 0, high = 4):
#
#
#     # Check base case
#     if high >= low:
#
#         mid = low + (high - low) // 2
#
#         # If element is present at the middle itself
#         if arr[mid] == x:
#             return True
#
#         # If element is smaller than mid, then it
#         # can only be present in left subarray
#         elif arr[mid] > x:
#             return binary_search(arr, x,low, mid-1)
#             if arr[mid-1] ==x:
#                 return True
#
#         # Else the element can only be present
#         # in right subarray
#         else:
#             return binary_search(arr, x, mid+1, high)
#             if arr[mid+1] ==x:
#                 return True
#
#
#
#
#
#     # Element is not present in the array
#     else:
#         return False
#
#
# print(binary_search([1, 2, 3, 4, 5], 4))
# True
# print(binary_search([1, 2, 3, 4, 5], 6))
# # False
#
#
# s=[1, 2, 3, 4, 5]
# print(len(s))
# d = len(s)-1
# print(d)



x = (n**2 for n in range(1, 6))
print(sum(x))


# print(next(x))
# # 1
# print(next(x))
# # 4
# print(next(x))
# # 9
# print(next(x))
# # 16
# print(next(x, None))
# print(next(x, None))
# # None
# x = (n**2 for n in range(1, 6))
# for n in x:
#    print(n)
# # 1
# # 4
# # 9
# # 16
#
# # very_big_data = (n for n in range(1000000000000))
# # for n in very_big_data:
# #    print(n, end=' ')
# #    if n == 100:
# #        break
#
#
# very_big_data = (n for n in range(10000))
# very_big_data = list(very_big_data)
# print(type(very_big_data), len(very_big_data))
#
#
# def generate_test_data(n):
#    for i in range(n):
#        yield f"test_data_{i}"
#
#
# test_data = generate_test_data(10)
# print(test_data)
#
# print(next(test_data))
# # test_data_0
# print(next(test_data))
# # test_data_1
# # –ò —Ç–∞–∫ –¥–∞–ª–µ–µ, –ø–æ–∫–∞ –Ω–µ –∑–∞–∫–æ–Ω—á–∞—Ç—Å—è —ç–ª–µ–º–µ–Ω—Ç—ã...
#
#
# test_data = generate_test_data(10)
#
# for test in generate_test_data(10):
#    print(test)
#
#
#
#
# def generate_combinations(colors, sizes):
#    for color in colors:
#        for size in sizes:
#            yield color, size
#
#
# combination_generator = generate_combinations(["red", "blue"], ["small", "large"])
# for combination in combination_generator:
#    print(combination)
# # ('red', 'small')
# # ('red', 'large')
# # ('blue', 'small')
# # ('blue', 'large')
#
# combination_generator = ((color, size) for size in ["small", "large"] for color in ["red", "blue"])
# for n in combination_generator:
#    print(n)
# def generate_urls(g, x,y):
#     j= (f'{g}{n}' for n in range(x,y+1))
#     return j
#
#
#
#
# url_generator = generate_urls("/product/", 1, 3)
# for url in url_generator:
#    print(url)
# # /product/1
# # /product/2
# # /product/3
#
# print(list(generate_urls("https://example.com/page_", 1, 5)))




#
# import random
# #
# def generate_user_data(g, first_names,last_names, m):
#     q= int(m[0])
#     a =int(m[1])
#     very_big_data = (n for n in range(q,a))
#     very_big_data = list(very_big_data)
#
#     jj = [random.choice(first_names) for n in range(g)]
#     hh = [random.choice(last_names) for n in range(g)]
#     kk = [random.choice(very_big_data) for s in  range(g)]
#     for (j, h, k) in zip(jj, hh, kk):
#         yield j, h, k
#
#
#
# first_names = ["Alice", "Bob", "Charlie"]
# last_names = ["Smith", "Johnson", "Williams"]
# user_data_generator = generate_user_data(5, first_names, last_names, [18, 60])
# for user in user_data_generator:
#    print(user)
# ('Charlie', 'Williams', 19)
# ('Charlie', 'Johnson', 48)
# ('Bob', 'Johnson', 26)
# ('Charlie', 'Smith', 36)
# ('Charlie', 'Johnson', 35)
# very_big_data = ['hgfh', 'gdf', 'dfsdf', 'sf']
# for i in range(g):
# j = list(( n for n in random.choice(first_names)))
# for first_name in first_names:
#     l = random.choice(first_names)
# h = (l for l in random.choice(last_names))
# for random.choice(last_names) in last_names:
# k =list ((s for s in random.choice(very_big_data)))
# for random.choice(m) in m:

# print(l)
# print(random.choice(last_names))
#
#
#
# def func(...):
#    # –ö–∞–∫–æ–π-—Ç–æ –Ω–∞–±–æ—Ä –æ–ø–µ—Ä–∞—Ü–∏–π –∑–¥–µ—Å—å
#    for _ in range(...):
#        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
#        yield ...
#        # –ö–æ–¥ –∑–¥–µ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –ø—Ä–∏ –ø–æ—Å–ª–µ–¥—É—é—â–µ–º –≤—ã–∑–æ–≤–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞)
#    # –ò –∫–æ–¥ –∑–¥–µ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –ø—Ä–∏ –ø–æ—Å–ª–µ–¥—É—é—â–µ–º –≤—ã–∑–æ–≤–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞)

# def fibonacci(n):
#    # –ë–∞–∑–æ–≤—ã–π —Å–ª—É—á–∞–π
#    if n <= 0:
#        k =[]
#        return k
#
#    if n == 1:
#        k = [0]
#        return k
#
#    # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π —Å–ª—É—á–∞–π
#    else:
#        k=[0,1]
#        for i in range(n):
#            k.append(n-1+n-2)
#
#
#
#
#
# test1 = list(fibonacci(15))
#
#
#
# print(test1)
def fibonacci(n):
    a = 0
    b = 1
    for i in range(n):
        yield a
        a, b = b, a + b


print(list(fibonacci(1)))

import math

def primes(x):
    prs = {}
    p = 2
    while p-1 < x:
        if p not in prs:
            yield p
            prs[p * p] = [p]
        else:
            for s in prs[p]:
                prs.setdefault(s + p, []).append(s)
            del prs[p]

        p += 1
print(list(primes(0)))


# # —Å–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å
# translator = {'bug': '–æ—à–∏–±–∫–∞', 'function': '—Ñ—É–Ω–∫—Ü–∏—è', 'approve': '—Å–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å'}
#
# # –≤—ã–≤–æ–¥–∏–º —Å–ª–æ–≤–∞—Ä—å –≤ –∫–æ–Ω—Å–æ–ª—å
# # –∫–ª—é—á–∏ —Å–ª–æ–≤–∞—Ä—è - –º–µ—Ç–æ–¥ keys()
# print(f'–ö–ª—é—á–∏ —Å–ª–æ–≤–∞—Ä—è: {translator.keys()}')
# # –∑–Ω–∞—á–µ–Ω–∏—è —Å–ª–æ–≤–∞—Ä—è - –º–µ—Ç–æ–¥ values()
# print(f'–ó–Ω–∞—á–µ–Ω–∏—è —Å–ª–æ–≤–∞—Ä—è: {translator.values()}')
# # –ø–∞—Ä—ã –∫–ª—é—á:–∑–Ω–∞—á–µ–Ω–∏–µ - –º–µ—Ç–æ–¥ items()
# print(f'–ü–∞—Ä—ã –∫–ª—é—á:–∑–Ω–∞—á–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è: {translator.items()}')




# # —Å–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å
# translator = {'bug': '–æ—à–∏–±–∫–∞', 'function': '—Ñ—É–Ω–∫—Ü–∏—è', 'approve': '—Å–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å'}
# print(f'–ò—Å—Ö–æ–¥–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å: {translator}')
#
# # –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ —Å–ª–æ–≤–∞—Ä—å
# translator['tester'] = '—Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫'
# print(f'–°–ª–æ–≤–∞—Ä—å —Å –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å—å—é: {translator}')
#
# # —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å –≤ —Å–ª–æ–≤–∞—Ä–µ
# translator['tester'] = '—Ç–µ—Å—Ç–µ—Ä'
# print(f'–°–ª–æ–≤–∞—Ä—å —Å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞–ø–∏—Å—å—é: {translator}')




# # —Å–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å
# translator = {'bug': '–æ—à–∏–±–∫–∞', 'function': '—Ñ—É–Ω–∫—Ü–∏—è', 'approve': '—Å–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å'}
# # –≤—ã–≤–æ–¥–∏–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Å–ª–æ–≤–∞—Ä–µ
# print(f'–°–ª–æ–≤–∞ –≤ —Å–ª–æ–≤–∞—Ä–µ: {translator.keys()}')
#
# # —Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏
# eng_word = input('–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏: ')
# # –≤—ã–≤–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç —Å–ª–æ–≤–∞—Ä—è, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –ø–æ –∫–ª—é—á—É
# print(f'{eng_word} - {translator[eng_word]}')


#
#
#  # —Å–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å
# translator = {'bug':'–æ—à–∏–±–∫–∞', 'function':'—Ñ—É–Ω–∫—Ü–∏—è', 'approve':'—Å–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å'}
# # —É–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å–ª–æ–≤–∞—Ä—è —Å –∫–ª—é—á–æ–º bug
# del translator['bug']
# # –≤—ã–≤–æ–¥–∏–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
# print(f'–ü–æ–ª—É—á–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å: {translator}')
#
#
#
#
# # —Å–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å
# translator = {'bug':'–æ—à–∏–±–∫–∞', 'function':'—Ñ—É–Ω–∫—Ü–∏—è', 'approve':'—Å–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å'}
# # —É–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å–ª–æ–≤–∞—Ä—è —Å –∫–ª—é—á–æ–º function –∏ –≤—ã–≤–æ–¥–∏–º –µ–≥–æ
# print(translator.pop('function'))
# # –≤—ã–≤–æ–¥–∏–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
# print(f'–ü–æ–ª—É—á–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å: {translator}')



#
# # —Å–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å
# translator = {'bug':'–æ—à–∏–±–∫–∞', 'function':'—Ñ—É–Ω–∫—Ü–∏—è', 'approve':'—Å–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å'}
# print(f'–ò—Å—Ö–æ–¥–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å: {translator}')
# # —Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å
# eng_word = input('–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å: ')
# # –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ –∫–ª—é—á–µ–π —Å–ª–æ–≤–∞—Ä—è
# if eng_word in translator.keys():
#     print(f'–£–¥–∞–ª—è–µ–º –∏–∑ —Å–ª–æ–≤–∞—Ä—è: {eng_word} - {translator[eng_word]}')
#     # —É–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å–ª–æ–≤–∞—Ä—è —Å –∫–ª—é—á–æ–º eng_word
#     del translator[eng_word]
# else:
#     print('–≠—Ç–æ–≥–æ —Å–ª–æ–≤–∞ –≤ —Å–ª–æ–≤–∞—Ä–µ –Ω–µ—Ç')
# # –≤—ã–≤–æ–¥–∏–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
# print(f'–ü–æ–ª—É—á–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å: {translator}')
#
#
#
#
#
# # —Å–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å
# translator = {'bug':'–æ—à–∏–±–∫–∞', 'function':'—Ñ—É–Ω–∫—Ü–∏—è', 'approve':'—Å–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å'}
# print('–ò—Å—Ö–æ–¥–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å:')
# # —Ü–∏–∫–ª –ø–æ —ç–ª–µ–º–µ–Ω—Ç–∞–º —Å–ª–æ–≤–∞—Ä—è
# for key, value in translator.items():
#     # –≤—ã–≤–æ–¥–∏–º –ø–∞—Ä—ã –∫–ª—é—á - –∑–Ω–∞—á–µ–Ω–∏–µ
#     print(f'{key} - {value}')

#
#
# num1 = [1, 2, 3, 4, 5, 6, 7]
# num2 = [1, 2.0, 3.1, 4, 5, 6, 7.9]
# print(all([type(x) is int for x in num1]))
# # True
# print(all([type(x) is int for x in num2]))
# # False
# lis_1=[['0','0','0'],['4','5','6'],['7','7','7']]
